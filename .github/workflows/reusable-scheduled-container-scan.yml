---
on:
  workflow_call:
    secrets:
      cve-scan-slack-webhook-url:
        required: true

permissions: {}

jobs:
  scheduled-container-scan:
    name: Scheduled Container Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Clean Actions Runner
        id: clean_actions_runner
        uses: ministryofjustice/analytical-platform-github-actions/clean-actions-runner@main
        with:
          confirm: true

      - name: Get Latest Release Tag
        id: get_latest_release
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latestReleaseTag=$(gh release list --repo ${{ github.repository }} --exclude-drafts --exclude-pre-releases --json "isLatest,tagName" | jq -r '.[] | select(.isLatest == true) | .tagName')
          export latestReleaseTag

          echo "latest-release-tag=$latestReleaseTag" >>"${GITHUB_ENV}"

      - name: Checkout
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          ref: ${{ env.latest-release-tag }}

      - name: Generate .trivyignore
        id: download_trivyignore
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          imageName=$(grep "^FROM" Dockerfile | cut -d' ' -f2 | cut -d':' -f1)
          imageVersion=$(grep "^FROM" Dockerfile | cut -d':' -f2 | cut -d'@' -f1)

          if [[ "${imageName}" == "ghcr.io/ministryofjustice/analytical-platform-"* ]]; then
            imageRepository=${imageName#ghcr.io/}

            downloadTrivyignore=$(gh api "repos/${imageRepository}/contents/.trivyignore?ref=${imageVersion}" 2>/dev/null || true)
            export downloadTrivyignore

            downloadTrivyignoreStatus=$(jq -r '.status' <<< "${downloadTrivyignore}")
            export downloadTrivyignoreStatus

            if [[ "${downloadTrivyignoreStatus}" == "null" ]]; then
              echo ".trivyignore found, writing to file"
              jq -r '.content' <<< "${downloadTrivyignore}" | base64 --decode > .base-trivyignore

              if [[ ! -f .trivyignore ]]; then
                echo ".trivyignore not found, creating new file"
                mv .base-trivyignore .trivyignore
              else
                echo ".trivyignore already exists, merging with existing file"
                cat .base-trivyignore >> .trivyignore
              fi

            elif [[ "${downloadTrivyignoreStatus}" == "404" ]]; then
              echo ".trivyignore not found" # It's OK if we don't find one, it means one might not exist
            else
              echo "Error downloading .trivyignore"
              exit 1
            fi
          else
            echo "Image is not an Analytical Platform image, skipping .trivyignore download"
          fi

      - name: Scan
        id: scan
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # v0.30.0
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          image-ref: ghcr.io/${{ github.repository }}:${{ env.latest-release-tag }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 1

      - name: Slack CVE Alert
        if: failure() && steps.scan.outcome == 'failure'
        id: slack_cve_alert
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          webhook-type: incoming-webhook
          webhook: ${{ secrets.cve-scan-slack-webhook-url }}
          payload: |
            {
              "repository": "${{ github.repository }}",
              "run_id": "${{ github.run_id }}"
            }
