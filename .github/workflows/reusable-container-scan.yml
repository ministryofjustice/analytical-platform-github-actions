---
on:
  workflow_call:
    inputs:
      clean-actions-runner:
        type: boolean
        required: false
        default: true
      container-file:
        type: string
        required: false
        default: Dockerfile
      scan-severity:
        type: string
        required: false
        default: HIGH,CRITICAL

permissions: {}

jobs:
  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Harden Runner
        if: github.event.repository.private == false
        id: harden_runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        id: checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Clean Actions Runner
        if: inputs.clean-actions-runner == true
        id: clean_actions_runner
        uses: ministryofjustice/action-clean-runner@390530713a326ddc099b2114f38dd0f2f8eac6da # v1.1.0
        with:
          confirm: true

      - name: Build
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ${{ inputs.container-file }}
          push: false
          tags: ${{ github.sha }}

      - name: Generate .trivyignore
        id: generate_trivyignore
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CONTAINER_FILE: ${{ inputs.container-file }}
        run: |
          imageName=$(grep "^FROM" "${CONTAINER_FILE}" | cut -d' ' -f2 | cut -d':' -f1)
          imageVersion=$(grep "^FROM" "${CONTAINER_FILE}" | cut -d':' -f2 | cut -d'@' -f1)

          if [[ "${imageName}" == "ghcr.io/ministryofjustice/analytical-platform-"* ]]; then
            imageRepository=${imageName#ghcr.io/}

            downloadTrivyignore=$(gh api "repos/${imageRepository}/contents/.trivyignore?ref=${imageVersion}" 2>/dev/null || true)
            export downloadTrivyignore

            downloadTrivyignoreStatus=$(jq -r '.status' <<< "${downloadTrivyignore}")
            export downloadTrivyignoreStatus

            if [[ "${downloadTrivyignoreStatus}" == "null" ]]; then
              echo ".trivyignore found, writing to file"
              jq -r '.content' <<< "${downloadTrivyignore}" | base64 --decode > .base-trivyignore

              if [[ ! -f .trivyignore ]]; then
                echo ".trivyignore not found, creating new file"
                mv .base-trivyignore .trivyignore
              else
                echo ".trivyignore already exists, merging with existing file"
                cat .base-trivyignore >> .trivyignore
              fi

            elif [[ "${downloadTrivyignoreStatus}" == "404" ]]; then
              echo ".trivyignore not found" # It's OK if we don't find one, it means one might not exist
            else
              echo "Error downloading .trivyignore"
              exit 1
            fi
          else
            echo "Image is not an Analytical Platform image, skipping .trivyignore download"
          fi

      - name: Scan
        id: scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1
        with:
          image-ref: ${{ github.sha }}
          severity: ${{ inputs.scan-severity }}
          ignore-unfixed: true
          exit-code: 1
